/*
 * Microsoft 365 App
 *
 * API to access and configure the Microsoft 365 App
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProxyApiController binds http requests to an api service and writes the service results to the http response
type ProxyApiController struct {
	service      ProxyApiServicer
	errorHandler ErrorHandler
}

// ProxyApiOption for how the controller is set up.
type ProxyApiOption func(*ProxyApiController)

// WithProxyApiErrorHandler inject ErrorHandler into controller
func WithProxyApiErrorHandler(h ErrorHandler) ProxyApiOption {
	return func(c *ProxyApiController) {
		c.errorHandler = h
	}
}

// NewProxyApiController creates a default api controller
func NewProxyApiController(s ProxyApiServicer, opts ...ProxyApiOption) Router {
	controller := &ProxyApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProxyApiController
func (c *ProxyApiController) Routes() Routes {
	return Routes{
		{
			"MsproxyMsGraphPathGet",
			strings.ToUpper("Get"),
			"/v1/msproxy/{ms-graph-path}",
			c.MsproxyMsGraphPathGet,
		},
	}
}

// MsproxyMsGraphPathGet - A proxy server that passes requests to the Microsoft Graph API
func (c *ProxyApiController) MsproxyMsGraphPathGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	msGraphPathParam := params["ms-graph-path"]

	elionaProjectIdParam := r.Header.Get("Eliona-Project-Id")
	result, err := c.service.MsproxyMsGraphPathGet(r.Context(), msGraphPathParam, elionaProjectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
